"""Stock feature generation including momentum indicators and volatility

    Currently RSI (Relative Strength Index), volatility, and price return rank are successfully calculated for each stock
    and for each day based on the basic price data ingested from yahoo. To Run the program,
    the stock_price_and_returns.csv file containing time series daily, monthly, and yearly returns
    must be generated by running the price_returns.py file and placed in the same directory.
    The output of the prgram will be an updated csv file with a new rsi and volatility column.

    TODO: percent off 52 week high, and Sharp Ratio

George Krug
04/22/2019
"""


import pandas as pd
from talib import RSI
import numpy as np
import matplotlib.pyplot as plt
import time
import math


START_DATE = '2011-01-03'
END_DATE = '2019-04-03'
ROLLING_WINDOW = 30
RANK_RECALCULATE = 1
YEARLY_TRADING_DAYS = 252
MONTHLY_TRADING_DAYS = 21


def get_stock_rsi_daily(time_series_df, ticker):
    # compute RSI vector using ta-lib
    close = get_time_series_adjusted_close(time_series_df, ticker)
    rsi = RSI(close, timeperiod=20)
    rsi_series = pd.Series(rsi)
    # add to db data structure
    tmpDf = pd.DataFrame(data=rsi_series, columns=['RSI'])
    time_series_df.loc[ticker, 'RSI'] = tmpDf['RSI'].values
    return time_series_df


def get_stock_percent_off_52_week_high():
    pass


def update_rank_dataframe(df, stock_returns, period, date):
    stock_period = str(period) + "_Return"
    rank_period = str(period) + "_Return_Rank"
    df_tmp = df.reset_index(level=0)
    returns_df = pd.DataFrame.from_dict(stock_returns, orient='index', columns=[stock_period])
    returns_df.sort_values(by=[stock_period], ascending=False, inplace=True)
    returns_df.reset_index(level=0, inplace=True)
    returns_df[period] = returns_df.index
    returns_df.columns = ['Symbol', stock_period, rank_period]
    daily_adjusted_rank_df = pd.DataFrame()
    daily_adjusted_rank_df = pd.merge(df_tmp.loc[date], returns_df, on='Symbol', how='left')
    daily_adjusted_rank_df['Date'] = date
    daily_adjusted_rank_df.set_index(['Symbol', 'Date'], inplace=True)

    return daily_adjusted_rank_df


def update_with_null_return_rankings(df, stocks_dict, period, date):
    stock_period = str(period) + "_Return"
    rank_period = str(period) + "_Return_Rank"
    df_tmp = df.reset_index(level=0)
    daily_rank_df = pd.DataFrame.from_dict(stocks_dict, orient='index', columns=[stock_period])
    daily_rank_df.reset_index(level=0, inplace=True)
    daily_rank_df[rank_period] = np.nan
    daily_rank_df.columns = ['Symbol', stock_period, rank_period]
    updated_daily_subset_df = pd.DataFrame()
    updated_daily_subset_df = pd.merge(df_tmp.loc[date], daily_rank_df, on='Symbol', how='left')
    updated_daily_subset_df['Date'] = date
    updated_daily_subset_df.set_index(['Symbol', 'Date'], inplace=True)
    return updated_daily_subset_df


def get_daily_adjusted_stock_return_rankings(df, ticker_list, date_list):
    global yearl_rank_df, monthly_rank_df
    yearly_rank_df = pd.DataFrame()
    monthly_rank_df = pd.DataFrame()

    for date in date_list:
        yearly = {}
        monthly = {}
        yearly_no_data = {}
        monthly_no_data = {}
        print(date)

        for symbol in ticker_list:
            try:
                if math.isnan(df.loc[symbol, date].loc['Pct_Change_Yearly']):
                    yearly_no_data[symbol] = 'x'
                if not math.isnan(df.loc[symbol, date].loc['Pct_Change_Yearly']):
                    yearly[symbol] = df.loc[symbol, date].loc['Pct_Change_Yearly']
            except Exception as err:
                yearly_no_data[symbol] = 'x'

            try:
                if math.isnan(df.loc[symbol, date].loc['Pct_Change_Monthly']):
                    monthly_no_data[symbol] = 'x'
                if not math.isnan(df.loc[symbol, date].loc['Pct_Change_Monthly']):
                    monthly[symbol] = df.loc[symbol, date].loc['Pct_Change_Monthly']
            except Exception as err:
                monthly_no_data[symbol] = 'x'

        if len(yearly) > 0:
            daily_adjusted_rank_df = update_rank_dataframe(df, yearly, "Yearly", date)
            yearly_rank_df = yearly_rank_df.append(daily_adjusted_rank_df)
        else:
            new_df = update_with_null_return_rankings(df, yearly_no_data, "Yearly", date)
            yearly_rank_df = yearly_rank_df.append(new_df)
        if len(monthly) > 0:
            daily_adjusted_rank_df = update_rank_dataframe(df, monthly, "Monthly", date)
            monthly_rank_df = monthly_rank_df.append(daily_adjusted_rank_df)
        else:
            new_df = update_with_null_return_rankings(df, monthly_no_data, "Monthly", date)
            monthly_rank_df = monthly_rank_df.append(new_df)

    return yearly_rank_df, monthly_rank_df


def get_stock_volatility(time_series_df, ticker):
    close = get_time_series_adjusted_close(time_series_df, ticker)
    # compute Volatility with intermediate-term rolling window
    close_series = pd.Series(close)
    roller = close_series.rolling(ROLLING_WINDOW)
    vol_vec = roller.std(ddof=0)
    tmp_vol_df = pd.DataFrame(data=vol_vec, columns=['Volatility'])
    time_series_df.loc[ticker, 'Volatility'] = (tmp_vol_df['Volatility'].values / close) * 12
    return time_series_df


def get_stock_sharp_ratio():
    pass


def get_time_series_adjusted_close(time_series_df, ticker):
    return time_series_df.loc[ticker].loc[::, 'AdjClose'].values


def get_dataframe_from_csv(file):
    try:
        df = pd.read_csv(file)
    except FileNotFoundError as err:
        print("FileNotFoundError with path " + file + "\nError: " + err)
        raise
    return df


def add_columns_to_df(basic_df, columns):
    # Set Multi Index on the dataframe to get the 3d data structure
    try:
        new_df = basic_df.set_index(['Symbol', 'Date'])
    except Exception as err:
        print("index set error")
        print(err)
        raise

    # Add columns to the new df
    for col in columns:
        new_df[col] = -1

    return new_df


def main():

    print('Generating Momentum Features\n-------------------------------------------------------------')
    file_path = "stock_prices_and_returns.csv"
    output_file_path = "momentum-features.csv"
    test_output_file = "test-momentum.csv"
    new_columns = ['RSI', 'Volatility']
    ticker_list = []
    date_list = []

    basic_df = get_dataframe_from_csv(file_path)
    df = add_columns_to_df(basic_df, new_columns)

    # Get Index Lists
    for symbol, mrow in df.groupby(level=0):
        ticker_list.append(symbol)

    for date, mrow in df.groupby(level=1):
        date_list.append(date)

    print('Updating Dataframe with RSI, Volatility, and Performance Rank columns......')
    start = time.time()
    for symbol in ticker_list:
        df = get_stock_rsi_daily(df, symbol)
        df = get_stock_volatility(df, symbol)

    # Get Daily adjusted return rankings based on trailing monthly and yearly prices
    df_yearly, df_monthly = get_daily_adjusted_stock_return_rankings(df, ticker_list, date_list)

    # Reset multi-index to single index on Symbol
    df_yearly.reset_index(level=1, inplace=True)
    df_monthly.reset_index(level=1, inplace=True)

    # Drop duplicate columns to isolate monthly rankings
    try:
        df_monthly.drop(columns=['Open','High', 'Low', 'Close', 'Volume', 'AdjClose', 'Pct_Change_Daily', 'Pct_Change_Monthly',
                                 'Pct_Change_Yearly', 'RSI', 'Volatility'], inplace=True)
    except Exception as err:
        pass

    # Declare Final Dataframe to be stored
    final_df = pd.DataFrame()

    # Loop symbol rows in dataframe and merge to add the monthly return rankings to the yearly
    for symbol in ticker_list:
        tmp = pd.merge(df_yearly.loc[symbol], df_monthly.loc[symbol], on='Date', how='inner')
        df_yearly.loc[symbol, :] = tmp
        tmp['Symbol'] = symbol
        final_df = final_df.append(tmp)

    # Adjusted index before converted or stored
    try:
        final_df.reset_index(level=0, inplace=True)
        final_df.set_index(['Symbol', 'Date'], inplace=True)
        final_df.drop(columns=['Yearly_Return', 'Monthly_Return', 'index'], inplace=True)

    except Exception as err:
        print(err)

    print("Writing to file: " + output_file_path)
    final_df.to_csv(output_file_path, encoding='utf-8', index=True)
    end = time.time()
    print("Process time: " + str(end - start) + " seconds.")


if __name__ == '__main__':
    main()
